{"remainingRequest":"/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/forge/libellux.bitbucket.io/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/index.js??ref--1-1!/home/forge/libellux.bitbucket.io/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/forge/libellux.bitbucket.io/docs/psad/README.md?vue&type=template&id=55451ca2&","dependencies":[{"path":"/home/forge/libellux.bitbucket.io/docs/psad/README.md","mtime":1597154912000},{"path":"/home/forge/libellux.bitbucket.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/forge/libellux.bitbucket.io/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/forge/libellux.bitbucket.io/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}