{"remainingRequest":"/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/forge/libellux.bitbucket.io/node_modules/vuepress-plugin-social-share/lib/components/SocialShareNetwork.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/forge/libellux.bitbucket.io/node_modules/vuepress-plugin-social-share/lib/components/SocialShareNetwork.vue","mtime":1597507638417},{"path":"/home/forge/libellux.bitbucket.io/node_modules/cache-loader/dist/cjs.js","mtime":1581601745860},{"path":"/home/forge/libellux.bitbucket.io/node_modules/babel-loader/lib/index.js","mtime":1596126721142},{"path":"/home/forge/libellux.bitbucket.io/node_modules/cache-loader/dist/cjs.js","mtime":1581601745860},{"path":"/home/forge/libellux.bitbucket.io/node_modules/vue-loader/lib/index.js","mtime":1596126721779}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGlzU1ZHIH0gZnJvbSAnLi4vdXRpbHMnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1NvY2lhbFNoYXJlTmV0d29yaycsCgogIGNvbXB1dGVkOiB7CiAgICBpc1N2Z0ljb24gKCkgewogICAgICByZXR1cm4gaXNTVkcodGhpcy5uZXR3b3JrLmljb24pCiAgICB9LAoKICAgIHNoYXJlVXJsICgpIHsKICAgICAgbGV0IHsgbmFtZSwgc2hhcmVyIH0gPSB0aGlzLm5ldHdvcmsKICAgICAgY29uc3QgewogICAgICAgIHVybCwKICAgICAgICB0aXRsZSwKICAgICAgICBxdW90ZSwKICAgICAgICBtZWRpYSwKICAgICAgICBoYXNodGFncywKICAgICAgICBkZXNjcmlwdGlvbiwKICAgICAgICB0d2l0dGVyVXNlciwKICAgICAgfSA9IHRoaXMuJHBhcmVudAoKICAgICAgLyoqCiAgICAgICAqIE9uIElPUywgVHdpdHRlciBzaGFyaW5nIHNob3VsZCd0IGhhdmUgYSBlbXB0eSBoYXNodGFnIHBhcmFtZXRlcgogICAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25pY29sYXNiZWF1dmFpcy92dWUtc29jaWFsLXNoYXJpbmcvaXNzdWVzLzE0MwogICAgICAgKi8KICAgICAgaWYgKFsndHdpdHRlciddLmluY2x1ZGVzKG5hbWUpICYmICFoYXNodGFncy5sZW5ndGgpIHsKICAgICAgICBzaGFyZXIgPSBzaGFyZXIucmVwbGFjZSgnJmhhc2h0YWdzPUBoYXNodGFncycsICcnKQogICAgICB9CgogICAgICByZXR1cm4gc2hhcmVyCiAgICAgICAgLnJlcGxhY2UoL0B1cmwvZywgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpCiAgICAgICAgLnJlcGxhY2UoL0B0aXRsZS9nLCBlbmNvZGVVUklDb21wb25lbnQodGl0bGUpKQogICAgICAgIC5yZXBsYWNlKC9AbWVkaWEvZywgbWVkaWEpCiAgICAgICAgLnJlcGxhY2UoL0BkZXNjcmlwdGlvbi9nLCBlbmNvZGVVUklDb21wb25lbnQoZGVzY3JpcHRpb24pKQogICAgICAgIC5yZXBsYWNlKC9AcXVvdGUvZywgZW5jb2RlVVJJQ29tcG9uZW50KHF1b3RlKSkKICAgICAgICAucmVwbGFjZSgvQGhhc2h0YWdzL2csIHRoaXMuZ2VuZXJhdGVIYXNoVGFncyhoYXNodGFncykpCiAgICAgICAgLnJlcGxhY2UoL0B0d2l0dGVydXNlci9nLCB0d2l0dGVyVXNlciA/IGAmdmlhPSR7dHdpdHRlclVzZXJ9YCA6ICcnKQogICAgfSwKICB9LAoKICBwcm9wczogewogICAgbmV0d29yazogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIHZhbGlkYXRvciAobmV0d29yaykgewogICAgICAgIHJldHVybiBuZXR3b3JrLnNoYXJlciAmJiBuZXR3b3JrLmljb24KICAgICAgfSwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9LAoKICAgIGlzUGxhaW46IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UsCiAgICB9LAogIH0sCgogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogRW5jb2RlIGhhc2h0YWdzIGZvciB0aGUgc3BlY2lmaWVkIHNvY2lhbCBuZXR3b3JrCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaHRhZ3MgQWxsIGhhc2h0YWdzIHNwZWNpZmllZAogICAgICoKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2h0YWdzIHN0cmluZwogICAgICovCiAgICBnZW5lcmF0ZUhhc2hUYWdzIChoYXNodGFncyA9ICcnKSB7CiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gdGhpcy5uZXR3b3JrCgogICAgICBpZiAoWydmYWNlYm9vayddLmluY2x1ZGVzKG5hbWUpICYmIGhhc2h0YWdzLmxlbmd0aCkgewogICAgICAgIHJldHVybiBgJTIzJHtoYXNodGFncy5zcGxpdCgnLCcpWzBdfWAKICAgICAgfQoKICAgICAgcmV0dXJuIGhhc2h0YWdzCiAgICB9LAoKICAgIC8qKgogICAgICogU2hhcmVzIFVSTCBpbiBzcGVjaWZpZWQgbmV0d29yawogICAgICovCiAgICBzaGFyZSAoKSB7CiAgICAgIGNvbnN0IHsgbmFtZSwgdHlwZSB9ID0gdGhpcy5uZXR3b3JrCiAgICAgIGNvbnN0IHsgdXJsIH0gPSB0aGlzLiRwYXJlbnQKCiAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgIGNhc2UgJ3BvcHVwJzoKICAgICAgICAgIHRoaXMuJHBhcmVudC5vcGVuU2hhcmVyICYmIHRoaXMuJHBhcmVudC5vcGVuU2hhcmVyKHRoaXMuc2hhcmVVcmwsIHsgbmFtZSwgdXJsIH0pCiAgICAgICAgICBicmVhawoKICAgICAgICBjYXNlICdkaXJlY3QnOgogICAgICAgICAgd2luZG93Lm9wZW4odGhpcy5zaGFyZVVybCwgJ19zZWxmJykKICAgICAgICAgIGJyZWFrCgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBicmVhawogICAgICB9CgogICAgICB0aGlzLiRyb290LiRlbWl0KCdzb2NpYWxfc2hhcmVfb3BlbicsIHsgbmFtZSwgdXJsIH0pCiAgICB9LAogIH0sCn0K"},{"version":3,"sources":["SocialShareNetwork.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"SocialShareNetwork.vue","sourceRoot":"node_modules/vuepress-plugin-social-share/lib/components","sourcesContent":["<template>\n  <li\n    :key=\"network.name\"\n    class=\"social-share-network\"\n    role=\"option\"\n  >\n    <button\n      @click=\"share\"\n      :data-link=\"network.type=== 'popup'\n        ? `#share-${network.name}`\n        : shareUrl\"\n      :data-action=\"network.type=== 'popup'\n        ? null\n        : network.action\"\n      :title=\"network.name\"\n      class=\"social-share-btn\"\n      type=\"button\"\n      role=\"button\"\n    >\n      <span\n        :style=\"{ color: isPlain ? false : network.color }\"\n        v-html=\"network.icon\"\n        v-if=\"isSvgIcon\"\n        class=\"social-share-icon-svg\"\n        focusable=\"false\"\n      />\n\n      <span\n        v-else\n        :style=\"{ backgroundImage: `url(${network.icon})` }\"\n        class=\"social-share-icon-img\"\n      />\n    </button>\n  </li>\n</template>\n\n<script>\nimport { isSVG } from '../utils'\n\nexport default {\n  name: 'SocialShareNetwork',\n\n  computed: {\n    isSvgIcon () {\n      return isSVG(this.network.icon)\n    },\n\n    shareUrl () {\n      let { name, sharer } = this.network\n      const {\n        url,\n        title,\n        quote,\n        media,\n        hashtags,\n        description,\n        twitterUser,\n      } = this.$parent\n\n      /**\n       * On IOS, Twitter sharing should't have a empty hashtag parameter\n       * See https://github.com/nicolasbeauvais/vue-social-sharing/issues/143\n       */\n      if (['twitter'].includes(name) && !hashtags.length) {\n        sharer = sharer.replace('&hashtags=@hashtags', '')\n      }\n\n      return sharer\n        .replace(/@url/g, encodeURIComponent(url))\n        .replace(/@title/g, encodeURIComponent(title))\n        .replace(/@media/g, media)\n        .replace(/@description/g, encodeURIComponent(description))\n        .replace(/@quote/g, encodeURIComponent(quote))\n        .replace(/@hashtags/g, this.generateHashTags(hashtags))\n        .replace(/@twitteruser/g, twitterUser ? `&via=${twitterUser}` : '')\n    },\n  },\n\n  props: {\n    network: {\n      type: Object,\n      validator (network) {\n        return network.sharer && network.icon\n      },\n      required: true,\n    },\n\n    isPlain: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  methods: {\n    /**\n     * Encode hashtags for the specified social network\n     * @param {string} hashtags All hashtags specified\n     *\n     * @returns {string} hashtags string\n     */\n    generateHashTags (hashtags = '') {\n      const { name } = this.network\n\n      if (['facebook'].includes(name) && hashtags.length) {\n        return `%23${hashtags.split(',')[0]}`\n      }\n\n      return hashtags\n    },\n\n    /**\n     * Shares URL in specified network\n     */\n    share () {\n      const { name, type } = this.network\n      const { url } = this.$parent\n\n      switch (type) {\n        case 'popup':\n          this.$parent.openSharer && this.$parent.openSharer(this.shareUrl, { name, url })\n          break\n\n        case 'direct':\n          window.open(this.shareUrl, '_self')\n          break\n\n        default:\n          break\n      }\n\n      this.$root.$emit('social_share_open', { name, url })\n    },\n  },\n}\n</script>\n"]}]}